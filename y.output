State 21 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stmt
    2        | %empty

    3 stmt: ID ASSIGN expr '\n'
    4     | TELLME '(' expr ')' '\n'
    5     | logiceq '\n' '\t' neststmt ELSE '\n' '\t' neststmt

    6 neststmt: ID ASSIGN expr '\n'
    7         | TELLME '(' expr ')' '\n'
    8         | logiceq '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    9 logiceq: expr LOGIC expr

   10 expr: VALUE
   11     | ID
   12     | expr OP expr
   13     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'\t' (9) 5 8
'\n' (10) 3 4 5 6 7 8
'(' (40) 4 7 13
')' (41) 4 7 13
error (256)
ID (258) 3 6 11
VALUE (259) 10
OP (260) 12
ASSIGN (261) 3 6
LOGIC (262) 9
TELLME (263) 4 7
ELSE (264) 5 8


Nonterminals, with rules where they appear

$accept (14)
    on left: 0
program (15)
    on left: 1 2, on right: 0 1
stmt (16)
    on left: 3 4 5, on right: 1
neststmt (17)
    on left: 6 7 8, on right: 5 8
logiceq (18)
    on left: 9, on right: 5 8
expr (19)
    on left: 10 11 12 13, on right: 3 4 6 7 9 12 13


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stmt

    $end    shift, and go to state 2
    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    '('     shift, and go to state 6

    stmt     go to state 7
    logiceq  go to state 8
    expr     go to state 9


State 2

    0 $accept: program $end .

    $default  accept


State 3

    3 stmt: ID . ASSIGN expr '\n'
   11 expr: ID .

    ASSIGN  shift, and go to state 10

    $default  reduce using rule 11 (expr)


State 4

   10 expr: VALUE .

    $default  reduce using rule 10 (expr)


State 5

    4 stmt: TELLME . '(' expr ')' '\n'

    '('  shift, and go to state 11


State 6

   13 expr: '(' . expr ')'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 13


State 7

    1 program: program stmt .

    $default  reduce using rule 1 (program)


State 8

    5 stmt: logiceq . '\n' '\t' neststmt ELSE '\n' '\t' neststmt

    '\n'  shift, and go to state 14


State 9

    9 logiceq: expr . LOGIC expr
   12 expr: expr . OP expr

    OP     shift, and go to state 15
    LOGIC  shift, and go to state 16


State 10

    3 stmt: ID ASSIGN . expr '\n'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 17


State 11

    4 stmt: TELLME '(' . expr ')' '\n'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 18


State 12

   11 expr: ID .

    $default  reduce using rule 11 (expr)


State 13

   12 expr: expr . OP expr
   13     | '(' expr . ')'

    OP   shift, and go to state 15
    ')'  shift, and go to state 19


State 14

    5 stmt: logiceq '\n' . '\t' neststmt ELSE '\n' '\t' neststmt

    '\t'  shift, and go to state 20


State 15

   12 expr: expr OP . expr

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 21


State 16

    9 logiceq: expr LOGIC . expr

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 22


State 17

    3 stmt: ID ASSIGN expr . '\n'
   12 expr: expr . OP expr

    OP    shift, and go to state 15
    '\n'  shift, and go to state 23


State 18

    4 stmt: TELLME '(' expr . ')' '\n'
   12 expr: expr . OP expr

    OP   shift, and go to state 15
    ')'  shift, and go to state 24


State 19

   13 expr: '(' expr ')' .

    $default  reduce using rule 13 (expr)


State 20

    5 stmt: logiceq '\n' '\t' . neststmt ELSE '\n' '\t' neststmt

    ID      shift, and go to state 25
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 26
    '('     shift, and go to state 6

    neststmt  go to state 27
    logiceq   go to state 28
    expr      go to state 9


State 21

   12 expr: expr . OP expr
   12     | expr OP expr .

    OP  shift, and go to state 15

    OP        [reduce using rule 12 (expr)]
    $default  reduce using rule 12 (expr)


State 22

    9 logiceq: expr LOGIC expr .
   12 expr: expr . OP expr

    OP  shift, and go to state 15

    $default  reduce using rule 9 (logiceq)


State 23

    3 stmt: ID ASSIGN expr '\n' .

    $default  reduce using rule 3 (stmt)


State 24

    4 stmt: TELLME '(' expr ')' . '\n'

    '\n'  shift, and go to state 29


State 25

    6 neststmt: ID . ASSIGN expr '\n'
   11 expr: ID .

    ASSIGN  shift, and go to state 30

    $default  reduce using rule 11 (expr)


State 26

    7 neststmt: TELLME . '(' expr ')' '\n'

    '('  shift, and go to state 31


State 27

    5 stmt: logiceq '\n' '\t' neststmt . ELSE '\n' '\t' neststmt

    ELSE  shift, and go to state 32


State 28

    8 neststmt: logiceq . '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    '\n'  shift, and go to state 33


State 29

    4 stmt: TELLME '(' expr ')' '\n' .

    $default  reduce using rule 4 (stmt)


State 30

    6 neststmt: ID ASSIGN . expr '\n'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 34


State 31

    7 neststmt: TELLME '(' . expr ')' '\n'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 35


State 32

    5 stmt: logiceq '\n' '\t' neststmt ELSE . '\n' '\t' neststmt

    '\n'  shift, and go to state 36


State 33

    8 neststmt: logiceq '\n' . '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    '\t'  shift, and go to state 37


State 34

    6 neststmt: ID ASSIGN expr . '\n'
   12 expr: expr . OP expr

    OP    shift, and go to state 15
    '\n'  shift, and go to state 38


State 35

    7 neststmt: TELLME '(' expr . ')' '\n'
   12 expr: expr . OP expr

    OP   shift, and go to state 15
    ')'  shift, and go to state 39


State 36

    5 stmt: logiceq '\n' '\t' neststmt ELSE '\n' . '\t' neststmt

    '\t'  shift, and go to state 40


State 37

    8 neststmt: logiceq '\n' '\t' . neststmt '\t' ELSE '\n' '\t' neststmt

    ID      shift, and go to state 25
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 26
    '('     shift, and go to state 6

    neststmt  go to state 41
    logiceq   go to state 28
    expr      go to state 9


State 38

    6 neststmt: ID ASSIGN expr '\n' .

    $default  reduce using rule 6 (neststmt)


State 39

    7 neststmt: TELLME '(' expr ')' . '\n'

    '\n'  shift, and go to state 42


State 40

    5 stmt: logiceq '\n' '\t' neststmt ELSE '\n' '\t' . neststmt

    ID      shift, and go to state 25
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 26
    '('     shift, and go to state 6

    neststmt  go to state 43
    logiceq   go to state 28
    expr      go to state 9


State 41

    8 neststmt: logiceq '\n' '\t' neststmt . '\t' ELSE '\n' '\t' neststmt

    '\t'  shift, and go to state 44


State 42

    7 neststmt: TELLME '(' expr ')' '\n' .

    $default  reduce using rule 7 (neststmt)


State 43

    5 stmt: logiceq '\n' '\t' neststmt ELSE '\n' '\t' neststmt .

    $default  reduce using rule 5 (stmt)


State 44

    8 neststmt: logiceq '\n' '\t' neststmt '\t' . ELSE '\n' '\t' neststmt

    ELSE  shift, and go to state 45


State 45

    8 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE . '\n' '\t' neststmt

    '\n'  shift, and go to state 46


State 46

    8 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE '\n' . '\t' neststmt

    '\t'  shift, and go to state 47


State 47

    8 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE '\n' '\t' . neststmt

    ID      shift, and go to state 25
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 26
    '('     shift, and go to state 6

    neststmt  go to state 48
    logiceq   go to state 28
    expr      go to state 9


State 48

    8 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt .

    $default  reduce using rule 8 (neststmt)
