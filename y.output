State 20 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: program stmt
    2        | %empty

    3 stmt: ID ASSIGN expr '\n'
    4     | TELLME '(' expr ')' '\n'
    5     | logiceq '\n'

    6 logiceq: expr LOGIC expr

    7 expr: VALUE
    8     | ID
    9     | expr OP expr
   10     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 3 4 5
'(' (40) 4 10
')' (41) 4 10
error (256)
ID (258) 3 8
VALUE (259) 7
OP (260) 9
ASSIGN (261) 3
LOGIC (262) 6
TELLME (263) 4


Nonterminals, with rules where they appear

$accept (12)
    on left: 0
program (13)
    on left: 1 2, on right: 0 1
stmt (14)
    on left: 3 4 5, on right: 1
logiceq (15)
    on left: 6, on right: 5
expr (16)
    on left: 7 8 9 10, on right: 3 4 6 9 10


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stmt

    $end    shift, and go to state 2
    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    '('     shift, and go to state 6

    stmt     go to state 7
    logiceq  go to state 8
    expr     go to state 9


State 2

    0 $accept: program $end .

    $default  accept


State 3

    3 stmt: ID . ASSIGN expr '\n'
    8 expr: ID .

    ASSIGN  shift, and go to state 10

    $default  reduce using rule 8 (expr)


State 4

    7 expr: VALUE .

    $default  reduce using rule 7 (expr)


State 5

    4 stmt: TELLME . '(' expr ')' '\n'

    '('  shift, and go to state 11


State 6

   10 expr: '(' . expr ')'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 13


State 7

    1 program: program stmt .

    $default  reduce using rule 1 (program)


State 8

    5 stmt: logiceq . '\n'

    '\n'  shift, and go to state 14


State 9

    6 logiceq: expr . LOGIC expr
    9 expr: expr . OP expr

    OP     shift, and go to state 15
    LOGIC  shift, and go to state 16


State 10

    3 stmt: ID ASSIGN . expr '\n'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 17


State 11

    4 stmt: TELLME '(' . expr ')' '\n'

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 18


State 12

    8 expr: ID .

    $default  reduce using rule 8 (expr)


State 13

    9 expr: expr . OP expr
   10     | '(' expr . ')'

    OP   shift, and go to state 15
    ')'  shift, and go to state 19


State 14

    5 stmt: logiceq '\n' .

    $default  reduce using rule 5 (stmt)


State 15

    9 expr: expr OP . expr

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 20


State 16

    6 logiceq: expr LOGIC . expr

    ID     shift, and go to state 12
    VALUE  shift, and go to state 4
    '('    shift, and go to state 6

    expr  go to state 21


State 17

    3 stmt: ID ASSIGN expr . '\n'
    9 expr: expr . OP expr

    OP    shift, and go to state 15
    '\n'  shift, and go to state 22


State 18

    4 stmt: TELLME '(' expr . ')' '\n'
    9 expr: expr . OP expr

    OP   shift, and go to state 15
    ')'  shift, and go to state 23


State 19

   10 expr: '(' expr ')' .

    $default  reduce using rule 10 (expr)


State 20

    9 expr: expr . OP expr
    9     | expr OP expr .

    OP  shift, and go to state 15

    OP        [reduce using rule 9 (expr)]
    $default  reduce using rule 9 (expr)


State 21

    6 logiceq: expr LOGIC expr .
    9 expr: expr . OP expr

    OP  shift, and go to state 15

    $default  reduce using rule 6 (logiceq)


State 22

    3 stmt: ID ASSIGN expr '\n' .

    $default  reduce using rule 3 (stmt)


State 23

    4 stmt: TELLME '(' expr ')' . '\n'

    '\n'  shift, and go to state 24


State 24

    4 stmt: TELLME '(' expr ')' '\n' .

    $default  reduce using rule 4 (stmt)
