Grammar

    0 $accept: program $end

    1 program: program stmt
    2        | %empty

    3 stmt: neststmt
    4     | logiceq '\n' '\t' neststmt ELSE '\n' '\t' neststmt

    5 neststmt: ID ASSIGN expr '\n'
    6         | TELLME '(' expr ')' '\n'
    7         | logiceq '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    8 logiceq: expr LOGIC expr

    9 expr: VALUE
   10     | ID
   11     | STRING
   12     | expr OP expr
   13     | '(' expr ')'


Terminals, with rules where they appear

$end (0) 0
'\t' (9) 4 7
'\n' (10) 4 5 6 7
'(' (40) 6 13
')' (41) 6 13
error (256)
ID (258) 5 10
VALUE (259) 9
OP (260) 12
ASSIGN (261) 5
LOGIC (262) 8
TELLME (263) 6
ELSE (264) 4 7
STRING (265) 11


Nonterminals, with rules where they appear

$accept (15)
    on left: 0
program (16)
    on left: 1 2, on right: 0 1
stmt (17)
    on left: 3 4, on right: 1
neststmt (18)
    on left: 5 6 7, on right: 3 4 7
logiceq (19)
    on left: 8, on right: 4 7
expr (20)
    on left: 9 10 11 12 13, on right: 5 6 8 12 13


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stmt

    $end    shift, and go to state 2
    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    stmt      go to state 8
    neststmt  go to state 9
    logiceq   go to state 10
    expr      go to state 11


State 2

    0 $accept: program $end .

    $default  accept


State 3

    5 neststmt: ID . ASSIGN expr '\n'
   10 expr: ID .

    ASSIGN  shift, and go to state 12

    $default  reduce using rule 10 (expr)


State 4

    9 expr: VALUE .

    $default  reduce using rule 9 (expr)


State 5

    6 neststmt: TELLME . '(' expr ')' '\n'

    '('  shift, and go to state 13


State 6

   11 expr: STRING .

    $default  reduce using rule 11 (expr)


State 7

   13 expr: '(' . expr ')'

    ID      shift, and go to state 14
    VALUE   shift, and go to state 4
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    expr  go to state 15


State 8

    1 program: program stmt .

    $default  reduce using rule 1 (program)


State 9

    3 stmt: neststmt .

    $default  reduce using rule 3 (stmt)


State 10

    4 stmt: logiceq . '\n' '\t' neststmt ELSE '\n' '\t' neststmt
    7 neststmt: logiceq . '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    '\n'  shift, and go to state 16


State 11

    8 logiceq: expr . LOGIC expr
   12 expr: expr . OP expr

    OP     shift, and go to state 17
    LOGIC  shift, and go to state 18


State 12

    5 neststmt: ID ASSIGN . expr '\n'

    ID      shift, and go to state 14
    VALUE   shift, and go to state 4
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    expr  go to state 19


State 13

    6 neststmt: TELLME '(' . expr ')' '\n'

    ID      shift, and go to state 14
    VALUE   shift, and go to state 4
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    expr  go to state 20


State 14

   10 expr: ID .

    $default  reduce using rule 10 (expr)


State 15

   12 expr: expr . OP expr
   13     | '(' expr . ')'

    OP   shift, and go to state 17
    ')'  shift, and go to state 21


State 16

    4 stmt: logiceq '\n' . '\t' neststmt ELSE '\n' '\t' neststmt
    7 neststmt: logiceq '\n' . '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    '\t'  shift, and go to state 22


State 17

   12 expr: expr OP . expr

    ID      shift, and go to state 14
    VALUE   shift, and go to state 4
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    expr  go to state 23


State 18

    8 logiceq: expr LOGIC . expr

    ID      shift, and go to state 14
    VALUE   shift, and go to state 4
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    expr  go to state 24


State 19

    5 neststmt: ID ASSIGN expr . '\n'
   12 expr: expr . OP expr

    OP    shift, and go to state 17
    '\n'  shift, and go to state 25


State 20

    6 neststmt: TELLME '(' expr . ')' '\n'
   12 expr: expr . OP expr

    OP   shift, and go to state 17
    ')'  shift, and go to state 26


State 21

   13 expr: '(' expr ')' .

    $default  reduce using rule 13 (expr)


State 22

    4 stmt: logiceq '\n' '\t' . neststmt ELSE '\n' '\t' neststmt
    7 neststmt: logiceq '\n' '\t' . neststmt '\t' ELSE '\n' '\t' neststmt

    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    neststmt  go to state 27
    logiceq   go to state 28
    expr      go to state 11


State 23

   12 expr: expr . OP expr
   12     | expr OP expr .

    $default  reduce using rule 12 (expr)


State 24

    8 logiceq: expr LOGIC expr .
   12 expr: expr . OP expr

    OP  shift, and go to state 17

    $default  reduce using rule 8 (logiceq)


State 25

    5 neststmt: ID ASSIGN expr '\n' .

    $default  reduce using rule 5 (neststmt)


State 26

    6 neststmt: TELLME '(' expr ')' . '\n'

    '\n'  shift, and go to state 29


State 27

    4 stmt: logiceq '\n' '\t' neststmt . ELSE '\n' '\t' neststmt
    7 neststmt: logiceq '\n' '\t' neststmt . '\t' ELSE '\n' '\t' neststmt

    ELSE  shift, and go to state 30
    '\t'  shift, and go to state 31


State 28

    7 neststmt: logiceq . '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    '\n'  shift, and go to state 32


State 29

    6 neststmt: TELLME '(' expr ')' '\n' .

    $default  reduce using rule 6 (neststmt)


State 30

    4 stmt: logiceq '\n' '\t' neststmt ELSE . '\n' '\t' neststmt

    '\n'  shift, and go to state 33


State 31

    7 neststmt: logiceq '\n' '\t' neststmt '\t' . ELSE '\n' '\t' neststmt

    ELSE  shift, and go to state 34


State 32

    7 neststmt: logiceq '\n' . '\t' neststmt '\t' ELSE '\n' '\t' neststmt

    '\t'  shift, and go to state 35


State 33

    4 stmt: logiceq '\n' '\t' neststmt ELSE '\n' . '\t' neststmt

    '\t'  shift, and go to state 36


State 34

    7 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE . '\n' '\t' neststmt

    '\n'  shift, and go to state 37


State 35

    7 neststmt: logiceq '\n' '\t' . neststmt '\t' ELSE '\n' '\t' neststmt

    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    neststmt  go to state 38
    logiceq   go to state 28
    expr      go to state 11


State 36

    4 stmt: logiceq '\n' '\t' neststmt ELSE '\n' '\t' . neststmt

    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    neststmt  go to state 39
    logiceq   go to state 28
    expr      go to state 11


State 37

    7 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE '\n' . '\t' neststmt

    '\t'  shift, and go to state 40


State 38

    7 neststmt: logiceq '\n' '\t' neststmt . '\t' ELSE '\n' '\t' neststmt

    '\t'  shift, and go to state 31


State 39

    4 stmt: logiceq '\n' '\t' neststmt ELSE '\n' '\t' neststmt .

    $default  reduce using rule 4 (stmt)


State 40

    7 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE '\n' '\t' . neststmt

    ID      shift, and go to state 3
    VALUE   shift, and go to state 4
    TELLME  shift, and go to state 5
    STRING  shift, and go to state 6
    '('     shift, and go to state 7

    neststmt  go to state 41
    logiceq   go to state 28
    expr      go to state 11


State 41

    7 neststmt: logiceq '\n' '\t' neststmt '\t' ELSE '\n' '\t' neststmt .

    $default  reduce using rule 7 (neststmt)
